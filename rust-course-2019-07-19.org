* Rust: a course under development.
deplotment? There should be a vagrant 

** CALENDAR
*** Day0 - Tools, Motivation
video1 [[Why Rust?]]
Read Chapter 1 of [[The Rust Book]]

Setting up rust: 
https://www.rust-lang.org/tools/install

*** Day1 - Ownership
getting the editor up and running.
https://www.rust-lang.org/tools

clone [[Rustlings]] into [[Course Home Directory]]
video1 [[Hello, World!]] & ex D1E1
video2 [[IntoRust: Ownership]] & ex D1E2

*** Day2 - Ownership
video1 [[Shared Borrows]] & ex D2E1, D2E2
video2 [[Mutable Borrows]] & ex D2E3

Another take.
Memory, Ownership and Borrowing
https://www.youtube.com/watch?v=8M0QfLUDaaA

*** Day3 - Ownership (snoyman's take)
Do Tutorial
+ https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership
+[[ Scope and Ownership in Rust]]

*** Day ------------------------------------------------------------------
Make sure $editor feature "goto-definition" works.  Need to be
able to see how some common functions are implemented.

in emacs this is bound to <M-.>, which pushes the previous location
onto a stack, which can be popped to go back with <M-,>

Make sure the editor can automatically tell you important type
information about the methods you're working with, such as parameter
types.

Work through Chapter 2 of the book.

*** Day ------------------------------------------------------------------
Chapter 3, Getting a feel for the language, this material will
probably be more familiar.

*** Day
Chapter 4 of the book, take your time.

*** Day
Optimizing Factorial.

*** Day
Chapter [6]
work through PROJECT:1 A Bad Stack

*** Day
Optimizing Matrix Multiplication

*** Day
RustConf 2018 - Benchmarking and Optimization of Rust Libraries by Paul Mason
https://www.youtube.com/watch?v=d2ZQ9-4ZJmQ

- how to import code to benchmark
  https://stackoverflow.com/questions/43998085/how-can-i-use-a-module-from-outside-the-src-folder-in-a-binary-project-such-as

**** Measure.
#[bench]

***** comparing benches from run to run, better than spreadsheets.
- cargo-benchcmp
  (nightly-only)
- criterion
  Has graphs!
  (can run on stable)

***** Microbench
***** Macrobench
***** Bounds checking with sized array
https://youtu.be/d2ZQ9-4ZJmQ?t=1058
LLVM can take advantage of fixed size slices.

keep functions smaller to take advantage of #[inline]

*** Day
exercises for Guard, Rc, Arc, Mutex.

**** Smart Pointers
| Smart Pointers   | Box<T>       | Rc<T>        | RefCell<T> |
|                  |              |              |            |
| #owners          | one          | many         | one        |
| immutable borrow | compile time | compile time | runtime    |
| mutable borrows  | compile time | --           | runtime    |

*** Day
Concurrency: https://www.youtube.com/watch?v=Dbytx0ivH7Q
note: virtual dispatch is the same as dynamic dispatch.

- Guard Type 
- channels
- depends: Rc, Arc, Mutex, thread::spawn,
- Rayon: easy 
- what is 6.005 doing?
- MPMC, multiple producer multiple consumer

Futures: asynch I/O
- highly concurrent

More on concurrency
https://parallel-rust-cpp.github.io

**** What is virtual dispatch in rust?
that's like c++ virtual table, is now called dynamic dispatch.

**** Tokio: mio + futures
- mio cross platform interface
- oneshot channels
- mpsc channel?

**** PROJECTS 
***** Definitely Do:
****** TOO MANY LISTS.
******* 1) A Bad Stack
https://rust-unofficial.github.io/too-many-lists/first-pop.html
******* 2) An Ok Stack  
https://rust-unofficial.github.io/too-many-lists/second.html
******* 3) A persistant Stack  
https://rust-unofficial.github.io/too-many-lists/third.html

***** After TOO MANY LISTS, Implement Skip lists
https://opendatastructures.org/ods-python-screen.pdf

***** Lambda Calculus interpreter
Î». x x

***** After Skip lists, implement red black tree found in Chapter 9
https://opendatastructures.org/ods-python-screen.pdf

***** Create a custom Hasher for HashMap
https://www.131002.net/siphash/siphash.pdf

***** QuadTree
WASM Web field simulator.




** STRUCTURE
*** PEDAGOGY
**** Re-asking original questions from stack overflow, rust forum 
***** What are the differences between Rust's `String` and `str`?
https://stackoverflow.com/questions/24158114/what-are-the-differences-between-rusts-string-and-str/24159933#24159933
***** How to enable/disable assertions in rust programs?
https://doc.rust-lang.org/std/macro.assert.html
Assertions are always checked in both debug and release builds, and
cannot be disabled. See debug_assert! for assertions that are not
enabled in release builds by default.

**** Incrementally Removing Functionality For Guided Projects
So build a full project with lots of tests that work.  At this point
the project is done with 100% test coverage.  On to the teaching part.

Remove the body of a method which will cause tests to fail.
commit this to a git repo.
tag this commit as the <Nth> homework.
tests will pass when the method has been reimplemented the method.

Step 2.

Comment out the failing tests. So the all remaining tests pass.
Remove the body of another method which will cause tests to fail.
commit this to a git repo.
tag this commit as the <N-1)th> homework.
tests will pass when the scholar has implemented the method.

Goto Step 2.

When each method has been commented out, then we're at the beginning
of the project, with a clear and proven step by step path through the
contruction of a program.  With the tests necessary 

Stopping here would be good enough for people who want to learn, but
since git history contains the implementation, it contains all the
information needed to cheat. It would be easy enough to automate
the checkout and wholesale copy of each commit along the way. Then
students could upload solutions and get a keys to the next git commit.

**** Borrow from 6.005 & 6.172
***** 6.172 SPEED.
- Loop Fusion, jamming.
  https://www.youtube.com/watch?time_continue=4232&v=H-1-X9bkop8

- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$4
  cargo build --release
  cargo asm my_crate::my_function

**** APPROACH
https://github.com/ctjhoa/rust-learning

As for a "From first principles, please spare me the details" 15 week
rust course?

Principle of covering the parts that are strictly necessary and hard
to learn to prevent grasping at straws.

What would Staff do?  rapidly and clearly define abstractions by knowing how
they work, getting practice and moving on to the next. Focusing early
on what's important and only what's necessary to achieve the goal, the
6.004x strategy for building a cpu and understanding how it works in
15 weeks.

Editor agnostic. Use what you want, but support varies by what people
have figured out so far.

assembling excellent pre-existing disparate material.  Overlap is
ok. Licensing is problematic though.  Trim the overlap and give
credit.

 - N topics while minding fast&safe
 + [[DarinM223 : The main concepts in Rust]]

**** Topics
***** Ownership
****** Types of owners 
+ [[Scope and Ownership in Rust]]
- Scopes
- Data and some Types: String, structs, enums, etc. not str.

****** Dependencies
Drop, Lifetime

when does ownership end?  it's called dropping.  what gets dropped?
What actually happens when something is dropped? 
https://doc.rust-lang.org/std/ops/trait.Drop.html

Drop trait. Are integers dropped?
https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f074df3610670b5a0e1bc9a97856fd36

***** Borrowing
***** Lifetimes
what has a lifetime?

***** Data
****** Slices
****** Enum
****** Structs
****** Vectors
****** Strings
****** HashMaps

***** Design modularity
Coupling
Indirection
Modules
Traits
Closures
Generics

***** Testing as you go
https://doc.rust-lang.org/book/ch12-04-testing-the-librarys-functionality.html


***** each concept has 3 exercises
***** each exercise views the concept 3 ways

**** General Programming concepts in rust
Mutability
Modules


**** How deep to go on these data structures?
Why not spend a whole day on each one? Learn how to study how the data
structures work, then people will know how to learn how to study how
other data structures work.

** INFO
*** Course Home Directory
This refers to the root directory of the course, you'll have to pick a
place, anywhere will do.

mkdir -p ~/courses/rust-fast-and-safe

** REFERENCES
*** Books
**** Rust Books
***** The Rust Book
https://doc.rust-lang.org/book/
***** The Rustonomicon 
https://doc.rust-lang.org/nomicon/
***** The Rust cookbook
https://rust-lang-nursery.github.io/rust-cookbook
***** Rust By Example
https://doc.rust-lang.org/rust-by-example/fn/closures.html
***** The Cargo Book
https://doc.rust-lang.org/cargo/index.html
**** Other Books
***** Open Data Structures
https://opendatastructures.org/ods-python-screen.pdf
*** Video (in no particular order)
**** Why Rust? 
http://intorust.com/tutorial/why-rust/
**** Hello, World!
http://intorust.com/tutorial/hello-world/
**** IntoRust: Ownership
http://intorust.com/tutorial/ownership/
**** Ownership in Rust with Carol Nichols and Jake Goulding
https://www.youtube.com/watch?v=iV4x_2tcVT8
**** Rust Programming Techniques
https://www.youtube.com/watch?v=vqavdUGKeb4
Exercise @ 54:55

*** Pages
**** Official Rust Home
https://doc.rust-lang.org/

**** Into Rust
http://intorust.com/

**** Rustlings
https://github.com/rust-lang/rustlings/

**** Snoyman's Rust Crash Course
***** Basics of ownership 1
https://www.snoyman.com/series/rust-crash-course

SOLUTIONS:
https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership-solutions

**** Rust Tutorial 2014
http://pnkfx.org/rust-examples-icfp2014/

**** DarinM223 : The main concepts in Rust
https://gist.github.com/DarinM223/e7237114cfdcf3644f90
**** Guidelines on Benchmarking and Rust
https://nbsoftsolutions.com/blog/guidelines-on-benchmarking-and-rust
**** Doc Tests
https://doc.rust-lang.org/rustdoc/documentation-tests.html
**** Scope and Ownership in Rust
https://tutorialedge.net/rust/scope-ownership-in-rust/
***** Exercises
****** Demonstrating life times by storing references in collections
****** Implementing 6 types of linked lists.
https://rust-unofficial.github.io/too-many-lists/first-pop.html
******* notes:
1) quickly skimmed introduction

next, don't copy paste these exercises type it all in,
- chapter 2: a bad stack
- chapter 3: a bad stack

/home/derek/dev/rust-projects/lists


***** Memory
****** Facets
Aliasing, how many pointers have this address?
****** Pointers
******* What is a box?
uses global allocator
https://doc.rust-lang.org/std/boxed/index.html
A pointer type for heap allocation.

******* Smart Pointers
******** RC a reference counted type enabling multiple ownership
******** Arc
********* https://doc.rust-lang.org/std/sync/struct.Arc.html
The type Arc<T> provides shared ownership of a value of type T,
allocated in the heap. Invoking clone on Arc produces a new Arc
instance, which points to the same value on the heap as the source
Arc, while increasing a reference count. When the last Arc pointer to
a given value is destroyed, the pointed-to value is also destroyed.

Shared references in Rust disallow mutation by default, and Arc is no
exception: you cannot generally obtain a mutable reference to
something inside an Arc. If you need to mutate through an Arc, use
Mutex, RwLock, or one of the Atomic types.
******** Cell
https://doc.rust-lang.org/stable/std/cell/index.html
https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/
********* SafeCell
********** RefCell
********** Cell

********* UnsafeCell

**** Raw string literals!
https://rahul-thakoor.github.io/rust-raw-string-literals/

**** Splitting Borrows
https://doc.rust-lang.org/nomicon/borrow-splitting.html

**** Turbofish
https://techblog.tonsser.com/posts/what-is-rusts-turbofish

**** Myths Programmers Believe about CPU Caches
https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches
/
** Vocab
*** [[Turbofish]]
*** [[Splitting Borrows]]
*** Deref Coercion
https://doc.rust-lang.org/book/ch15-02-deref.html


** Rustonomicon - Iterating over mutable references to elements in a vector
https://doc.rust-lang.org/stable/nomicon/vec.html.

```rust
let mut v = vec![100, 32, 57];
for i in &mut v {
    *i += 50;
}
Listing 8-9: Iterating over mutable references to elements in a vector
```

** Chapter 10
*** Blanket Implementations
impl<T: Display> ToString for T {
    // --snip--
}

âx, xâDisplay, fn ToString<x> 

in haskell syntax.

class (Display a) => ToString a where
    display :: a -> String

** TOOLS
running tests on code changes
https://github.com/passcod/cargo-watch

** Questions
*** Chapter7
**** What's the difference between packages and crates?
A crate is a binary or library

A package is one or more crates that provide a set of functionality. A
package contains a Cargo.toml file that describes how to build those
crates.

crates.io is an unfortunate name, should be packages.io.

**** What's the deal with modules?
***** How do I, #include "./point.h"

For programs with a main() function (i.e. not libraries)

// main.rs -----------------
mod point;  // introduce the module declared in point.rs 

use crate::point;

fn main() {
    let p1 = Point::new(2, 4);
}

**** Chapter14
***** What's a workspace?
***** mod is overloaded, it can mean
- append a local module's path onto crate:: 
- declare a module
***** files without mod keyword implictity declare module.

** Objective
Lifetimes, dangling references. This page is important for learning.
https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html

The first half is going to be about safety. The second half will be
about profiling and when unsafe is the right way to go.

** PERFORMANCE
let mut xs = Vec::with_capacity(123); // note: goto def and see how it's implemented.
xs.resize(123, 0) // xs now contains 123 zeros.
replaces malloc dance
https://doc.rust-lang.org/std/vec/struct.Vec.html


** Owned Types in structs.
https://doc.rust-lang.org/book/ch05-01-defining-structs.html#ownership-of-struct-data
"In the User struct definition in Listing 5-1, we used the owned
String type rather than the &str string slice type. This is a
deliberate choice because we want instances of this struct to own all
of its data and for that data to be valid for as long as the entire
struct is valid."


** Old topic ideas.
| Weeks | Difficulty | Topics                                                 |
|-------+------------+--------------------------------------------------------|
| ?     |          2 | Project focus, CPU emulator                            |
| ?     |          2 | Algebraic types and ERROR HANDLING.                    |
| ?     |          1 | Slices, Arrays and Vecs                                |
| ?     |          1 | Strings inside and out , UTF8                          |
| ?     |          2 | Memory: Heap, Ownership, borrowing ~ aliasing          |
| ?     |          2 | Memory: Lifetime Specifiers                            |
| ?     |          4 | Memory: Closures and Generics                          |
| ?     |          3 | Memory: Generics and impossible thinking?              |
| ?     |          5 | Design Challegenes with type system:                   |
| ?     |          3 | Broaching unsafe                                       |
| ?     |          4 | Memory: Safer Concurrency                              |
| ?     |          5 | Design Challegenes with type system: Concurrency       |
| ?     |          5 | Tradeoffs profiling and optimizing, matching           |
| ?     |          2 | Project focus                                          |
| ?     |          2 | Type Inference?, Hindley Milner?, How does rust do it? |
| ?     |          1 | brain cool down: realworld FFI                         |
| ?     |          1 | brain cool down: Macros                                |
|-------+------------+--------------------------------------------------------|

highlight differences: IF statement or IF expression?


*** Ownership
http://intorust.com/tutorial/ownership/

*** Null
**** problems with null.
http://wiki.c2.com/?WhatIsNull
http://cs242.stanford.edu/f18/lectures/05-1-rust-memory-safety.html
**** rust doesn't allow them

** Practical Stuff
*** Setting up Editor
https://areweideyet.com
**** Rust Language Server
https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/

*** Editor Considerations
**** Editing rustdoc comments in emacs
https://boinkor.net/2018/10/editing-rustdoc-comments-in-emacs/

**** Editor editions
It couldn't be taught in emacs, that's for sure.  An editor with
shallow learning curve that covers the basics without being painful,
that's a TODO: find good easy editor.  Then tackle the underlying
theory, (like the boolean logic lecture), but maybe for scant type
theory.  Just enough to hand wave around type features.  Jumping off
points to the compilers course and getting people ready to port xv6 to
Rust

**** It's critical that the editor support works
- find definition is necessary to see how things work.
  convenient references when learning else no learning.

**** Debugging
https://smallcultfollowing.com/babysteps/blog/2018/09/21/office-hours-0-debugging-with-gdb/

"rr aspires to be your primary C/C++ debugging tool for Linux,
replacing â well, enhancing â gdb. You record a failure once, then
debug the recording, deterministically, as many times as you want. The
same execution is replayed every time."
https://rr-project.org

** ONLINE RUST COURSE BLUEPRINT
*** Facets of Ownership
Explicate mechanics. What is rust doing automatically?  Using move
explicitly. Using move, replace, take, these common examples and the
exercise will be to slowly build up the automation.  Desugar
rust. Then Resugar it.

*** Languages

http://lambda-the-ultimate.org/node/4389

*** Copy
**** Shallow Copy
Copy, does a shallow copy of the stack data, but maintains pointers to
the same heap memory.
Types with Drop trait implemented can't implement Copy.
**** Clone (python's deep_copy)

*** A rust implementation of the lambda-calculus?

*** Scopes are owners.
*** Methodology
**** motivate by introducing project. A gem to behold.
The gem principle of course

6.004 uses the beta as an artifact to contend with and build.
SICP uses scheme in the same way.

Students assemble a working minimal artifact by somewhere around the
3/5 point. Then deep thought is required about modifying the
artifact.

The goal isnât to get people to the point where they can design and
build the artifact from scratch, rather itâs to deliver the ability to
use the tools and blueprints, to show them how to apply the tools to
the blueprints. Get familiar with the blueprints.

Introduce topics with top down wishful thinking to motivate.  Trace
down to necessary implementation.  build bottom up just in time to
maintain relevence.

Omni projects, a ~1 KLOC project.


*** RUST-O-RAMA bonanza.
own-o-rama part1
lifetime-o-rama part1
borr-ow-rama part1
closur-ama part1
*** What is the global allocator?
https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/global-allocators.html
Divergent functions.


*** How to train a new Rust member?
https://www.reddit.com/r/rust/comments/cx90ib/how_to_train_a_new_rust_member/

**** notice
- name shadowing
  reuse names when returning ownership.

*** Lifetime Specifier
Rust Tutorial - Lifetime Specifiers Explained
https://www.youtube.com/watch?v=QoEX-Vu-R6k

*** existing rust courses
http://cs242.stanford.edu/f18/
https://www.cs.umd.edu/class/spring2018/cmsc330/
http://users.cs.northwestern.edu/~jesse/course/eecs396rust/
*** Links
**** discussion
https://news.ycombinator.com/item?id=13265758
https://jvns.ca/blog/2016/09/11/rustconf-keynote/
*** Builder Pattern mitigates verbose constructors of large structs
https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
*** What's the diff?
https://www.apriorit.com/dev-blog/520-rust-vs-c-comparison
**** Topics
Zero cost abstractions
Move semantics, ownership, borrowing
Pointers
change checking
data races
polymorpism
runtime
FFI

*** Philosophy
Take the most learningest of learning moments one would find while
porting a C code base that hits all the highlights and set those up
like golf tees, paint the scenes in between, then the next hole. (a
golf course analogy isn't bad, maybe cliche though, narratives in
courses, lord of the rings would work too, video games have these
arcs, why not learning?, final bosses, etc)

So, a VM to get things up and running quickly.  People can SSH into
the VM if they want.  Backups should be included though, so a script
to pack up $HOME for backup on host machine, along with a package
list, etc.

Tests are local on the VM, perhaps design tests so that careful
inspection will provide clues to the solution but not too many clues
:)

make sure it's obvious why the pain is worth the upfront type systems
hurdles.

Lecture
*** Operational semantics, shortcut notation useful to speed understanding?
this is good, understand this
https://youtu.be/JbS8a-Ba0Ck?t=1010
https://arxiv.org/pdf/1903.00982.pdf
*** Closures
with pictures.
**** Closure has two things: 
- captures, the variables in the scope outside of the function
- 

**** sources
https://medium.com/swlh/understanding-closures-in-rust-21f286ed1759
https://ricardomartins.cc/2015/10/12/practical_differences_between_rust_closures_and_functions

** Lecture10
*** What's a trait?
It's like an interface.
*** What's an interface?
https://www.callicoder.com/golang-interfaces/ 

//It's like an object but it can't be instantiated 

It's a list of method declarations grouped by commonality.  A type is
said to implement an interface if the interfaces methods are
implemented for the type.

It's like C++ Abstract Class
Haskell type class

** Lecture Heap, aliasing, ownership and borrowing???
*** unvetted links
https://github.com/mre/idiomatic-rust

*** Objective
**** after this lecture you should:
- have a solid grasp of allocators and how their interface allows usage.
- understand the heap, issues of aliasing, ownership and borrowing.
- be able to port some basic imperative idioms to rust
- be able to decode rust error messages regarding ownership.

**** Common Errors

** Possible Omni Project 
*** Efficient mini scheme interpreter
Garbage Collector?
Challenges

*** Network
https://medium.com/coinmonks/understanding-ipfs-in-depth-5-6-what-is-libp2p-f8bf7724d452
**** Practical Networked Applications in Rust
https://github.com/pingcap/talent-plan/blob/master/rust/README.md

**** Enforcing protocol invarients with the borrow checker?

*** Emulator
Port a (C++ or C) (Beta or RiscV) cpu emulator to Rust.

Lab1 Control Structure Upgrades. 
Lab2 Debugging Rust
Lab3 Instruction set, Tests!
Lab4 Add a Mul instruction and profile it.
Lab5 Run linux on the emulator.




** Out of scope neat stuff!



https://github.com/RustPython/RustPython
*** Deep dives
https://smallcultfollowing.com/babysteps/
**** THEORY AND PAPERS
***** Non-lexical lifetimes: introduction (4/27/2016)
https://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/

***** Oxide: The Essence of Rust
https://arxiv.org/pdf/1903.00982.pdf
Places, provenances, types, kinds, shapes

****** references
Ownership Types For Flexible Alias Protection
https://www.cs.cornell.edu/courses/cs711/2005fa/papers/cpn-oopsla98.pdf

****** Kinds
******* Ordinary Types
******* Provenance

***** Ownership Types For Flexible Alias Protection
(a rust precursor)
https://www.cs.cornell.edu/courses/cs711/2005fa/papers/cpn-oopsla98.pdf
****** glossary
- CONTEXT = When a new object is created, it is alloted a new context
  which is considered to be inside that ob ject, and whose contents
  are deemed to be owned by that ob ject. In the program text, this
  partition is denoted by rep, the partition which holds the
  representation roughly a scheme frame

- OWNERSHIP TYPES = static types annotated with context declarations
  that represent object ownership

- RESTRICTED VISIBILITY = a property which limits the extent of object
  visibility

- REPRESENTATION CONTAINMENT = property which provides a notion of
  containment based on articulation points

- DOMINATOR = an articulator point

- VALUE OBJECTS = ??

****** representation containment



*** Hardware
Using Type-Level Programming in Rust to Make Safer Hardware Abstractions
https://blog.auxon.io/2019/10/25/type-level-registers/
*** Rust on microcontrollers
https://droogmic.github.io/microrust/

*** C2Rust compiler
https://c2rust.com

*** Helping the cause
implement for loop names in racer?
*** NEW IDEAS?
**** Restricted aliases
Restrict the graph distance of an aliased item. So, an object may
have field with type *C, but it can't have a field with type *B if B
has a field with type *C ?  

*** Scheme Segque
Implement lifetime observers in the basic scheme interpreter.
set! needs to be rethought.
when frames are removed from the environment lifetimes end
etc.

*** TOOLS
Pick an editor with good rust support. If you hit a snag then open an
issue so other people can learn.

Get the your editor working.


* UNSORTED 
https://blog.systems.ethz.ch/blog/2018/a-hammer-you-can-only-hold-by-the-handle.html

unimplemented!() is a time saver.

** Chunking Optimizations: Let the Knife Do the Work (AVX-512)
https://nullprogram.com/blog/2019/12/09/

** What's up with Cargo.lock?
https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html

** What's up with build scripts?
https://doc.rust-lang.org/cargo/reference/build-scripts.html

** Rust Guides
https://cheats.rs/2018-12-01/

** The Periodic Table of Rust Types
http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/

** Ownership visualization
https://rufflewind.com/2017-02-15/rust-move-copy-borrow

* Rust: Fast and Safe.
highlight pitfalls.
how rust mitigates.
prereq: C, and one of [scheme | python | ruby | javascript | perl | ...]

What are we always asking?
What design commitments are being made?
What is the safe/fast tradeoff of the design choice?

Strategy for concept X.  What is X useful for? instead of testing to
see if we can remember what X is useful for, encourage us to
do useful thing with X -- many different ways.

Things change, sometimes *any* design to get a thing working is *the*
design. The goal is to pick a flexible design, then optimize.

Refactoring with rust/haskell/scala is much easier tha


Setting up rust for unoptimized builds to make sense of the assembly
with profiles
https://doc.rust-lang.org/book/ch14-01-release-profiles.html

** RefCell
meander through the 

https://stackoverflow.com/search?q=%5Brust%5D+refcell
https://stackoverflow.com/questions/58885209/when-should-i-use-smart-pointers/58885731#58885731
https://stackoverflow.com/questions/30831037/situations-where-cell-or-refcell-is-the-best-choice

*** How do I return a reference to something inside a RefCell without breaking encapsulation?



*** exercise ideas
interlace The rust book with exercises?
rust playground iframe

